# Numpy 基础运算1
import numpy as np
a=np.array([10,20,30,40])   # array([10, 20, 30, 40])
b=np.arange(4)              # array([0, 1, 2, 3])

# numpy 的几种基本运算
c=a-b  # array([10, 19, 28, 37])
c=a+b   # array([10, 21, 32, 43])
c=a*b   # array([  0,  20,  60, 120])
c=b**2  # array([0, 1, 4, 9])   在Numpy中，想要求出矩阵中各个元素的乘方需要依赖双星符号 **(2次方)
c=10*np.sin(a)  # Numpy中具有很多的数学函数工具，比如三角函数等
# array([-5.44021111,  9.12945251, -9.88031624,  7.4511316 ]) 
print(b<3)  # 除了函数应用外，在脚本中对print函数进行一些修改可以进行逻辑判断
# array([ True,  True,  True, False], dtype=bool)
# 由于进行逻辑判断，返回的是一个bool类型的矩阵，即对满足要求的返回True，不满足的返回False。上述程序执行后得到的结果是[True True True False]
# 上述运算均是建立在一维矩阵，即只有一行的矩阵上面的计算，如果我们想要对多行多维度的矩阵进行操作，需要对开始的脚本进行一些修改


a=np.array([[1,1],[0,1]])
b=np.arange(4).reshape((2,2))
# array([[1, 1],
#       [0, 1]])
# array([[0, 1],
#       [2, 3]])
print(a)
print(b)
# 其中 reshape 操作是对矩阵的形状进行重构， 其重构的形状便是括号中给出的数字。 
# 稍显不同的是，Numpy中的矩阵乘法分为两种， 其一是前文中的对应元素相乘，其二是标准的矩阵乘法运算，即对应行乘对应列得到相应元素
c_dot = np.dot(a,b)
# array([[2, 4],
#       [2, 3]])

# 除此之外还有另外的一种关于dot的表示方法，即：
c_dot_2 = a.dot(b)
# array([[2, 4],
#       [2, 3]])


# 关于 sum(), min(), max()的使用
a=np.random.random((2,4))
print(a)
# array([[ 0.94692159,  0.20821798,  0.35339414,  0.2805278 ],
#       [ 0.04836775,  0.04023552,  0.44091941,  0.21665268]])

np.sum(a)   # 4.4043622002745959
np.min(a)   # 0.23651223533671784
np.max(a)   # 0.90438450240606416

# 如果你需要对行或者列进行查找运算，就需要在上述代码中为 axis 进行赋值。 
# 当axis的值为0的时候，将会以列作为查找单元， 当axis的值为1的时候，将会以行作为查找单元。
print("a =",a)
# a = [[ 0.23651224  0.41900661  0.84869417  0.46456022]
# [ 0.60771087  0.9043845   0.36603285  0.55746074]]

print("sum =",np.sum(a,axis=1))
# sum = [ 1.96877324  2.43558896]

print("min =",np.min(a,axis=0))
# min = [ 0.23651224  0.41900661  0.36603285  0.46456022]

print("max =",np.max(a,axis=1))
# max = [ 0.84869417  0.9043845 ]